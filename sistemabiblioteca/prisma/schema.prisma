generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation("AccountToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("SessionToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                @id @default(cuid())
  name                       String
  email                      String                @unique
  emailVerified              DateTime?             @map("email_verified")
  deleted                    Boolean               @default(false)
  enabled                    Boolean               @default(true)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  apellido                   String
  documento                  String                @unique
  numeroTelefono             String                @unique
  rol                        Rol                   @default(USUARIO)
  accounts                   Account[]             @relation("AccountToUser")
  prestamosComoBibliotecario Prestamo[]            @relation("BibliotecarioPrestamos")
  prestamosComoUsuario       Prestamo[]            @relation("UsuarioPrestamos")
  reservas                   Reserva[]
  sessions                   Session[]             @relation("SessionToUser")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Prestamo {
  id                  String         @id @default(cuid())
  libroId             String
  usuarioId           String
  bibliotecarioId     String
  fechaInicioPrestamo DateTime
  fechaFinPrestamo    DateTime
  estado              EstadoPrestamo
  bibliotecario       User           @relation("BibliotecarioPrestamos", fields: [bibliotecarioId], references: [id])
  libro               Libro          @relation(fields: [libroId], references: [id])
  usuario             User           @relation("UsuarioPrestamos", fields: [usuarioId], references: [id])
}

model Reserva {
  id                 String        @id @default(cuid())
  usuarioId          String
  libroId            String
  fechaInicioReserva DateTime
  fechaFinReserva    DateTime
  estado             EstadoReserva
  libro              Libro         @relation(fields: [libroId], references: [id])
  usuario            User          @relation(fields: [usuarioId], references: [id])
}

model Libro {
  id            String       @id @default(cuid())
  titulo        String
  categoria     Categoria
  paginas       Int
  estado        EstadoLibro
  ubicacion     String
  signatura     String       @unique
  autor         String
  imagesrc      String?      @default("https://img.freepik.com/vector-gratis/libro-cubierta-roja_1110-770.jpg")
  prestamos     Prestamo[]
  reservas      Reserva[]
}

enum Categoria {
  ROMANCE
  TERROR
  ACADEMICO
  AVENTURA
  DRAMA
  CIENCIA_FICCION
  ACCION
  COMEDIA
}

enum EstadoLibro {
  PRESTADO
  DISPONIBLE
  PERDIDO
  RESERVADO
}

enum Rol {
  USUARIO
  BIBLIOTECARIO
  DIRECTOR
}

enum EstadoReserva {
  VIGENTE
  VENCIDA
}

enum EstadoPrestamo {
  VIGENTE
  VENCIDO
  CERRADO
}
