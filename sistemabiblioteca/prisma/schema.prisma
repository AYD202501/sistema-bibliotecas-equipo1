// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AccountToUser")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "SessionToUser")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                          String          @id @default(cuid())
  name                        String          
  apellido                    String          
  rol                         Rol             @default(USUARIO)
  prestamosComoUsuario        Prestamo[]      @relation("UsuarioPrestamos")
  prestamosComoBibliotecario  Prestamo[]      @relation("BibliotecarioPrestamos")
  email                       String          @unique
  emailVerified               DateTime?       @map("email_verified")
  numeroTelefono              String          @unique 
  documento                   String          @unique 
  reservas                    Reserva[]    
  listaEsperaEn               UsuarioEnListaEspera?
  accounts                    Account[]       @relation(name: "AccountToUser")
  sessions                    Session[]       @relation(name: "SessionToUser")
  deleted                     Boolean         @default(false)
  enabled                     Boolean         @default(true)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Prestamo{
  id                    String            @id @default(cuid())
  libroId               String
  usuarioId             String   // Usuario que recibe el préstamo
  bibliotecarioId       String   // Usuario que realiza el préstamo
  libro                 Libro             @relation(fields: [libroId], references: [id])
  usuario               User              @relation("UsuarioPrestamos", fields: [usuarioId], references: [id])
  bibliotecario         User              @relation("BibliotecarioPrestamos", fields: [bibliotecarioId], references: [id])
  fechaInicioPrestamo   DateTime
  fechaFinPrestamo      DateTime
  estado                EstadoPrestamo
}

model Reserva{
  id                    String          @id @default(cuid())
  usuarioId             String          
  usuario               User            @relation(fields: [usuarioId], references: [id])
  libroId               String          
  libro                 Libro           @relation(fields: [libroId], references: [id])
  fechaInicioReserva    DateTime
  fechaFinReserva       DateTime
  estado                EstadoReserva

}

model Libro{
  id            String        @id @default(cuid())
  titulo        String
  categoria     Categoria  
  paginas       Int
  estado        EstadoLibro
  ubicacion     String
  signatura     String        @unique
  autor         String      
  listaEspera   ListaEspera?  
  listaEsperaId String?
  inventario    Inventario?   
  inventarioId  String?
  prestamos     Prestamo[]
  reservas      Reserva[]
}

model Inventario{
  id                    String  @id @default(cuid())
  libroId               String  @unique
  libro                 Libro   @relation(fields: [libroId], references: [id])
  cantidadDisponible    Int
  cantidadPrestada      Int 
  cantidadReservada     Int
  cantidadTotal         Int
}

model ListaEspera {
  id                  String                    @id @default(cuid())
  libro               Libro                     @relation(fields: [libroId], references: [id])
  libroId             String                    @unique
  usuarios            UsuarioEnListaEspera[]
  fechaCreacion       DateTime                  @default(now())
}

model UsuarioEnListaEspera {
  id                String        @id @default(cuid())
  user              User          @relation(fields: [userId], references: [id])
  userId            String        @unique   // El usuario solo puede estar en una lista a la vez
  listaEspera       ListaEspera   @relation(fields: [listaEsperaId], references: [id])
  listaEsperaId     String
  fechaCreacion     DateTime      @default(now())
}

enum Categoria{
  ROMANCE
  TERROR
  ACADEMICO
  AVENTURA
  DRAMA
  CIENCIA_FICCION
  ACCION
  COMEDIA
}

enum EstadoLibro{
  PRESTADO
  DISPONIBLE
  PERDIDO
  RESERVADO
}

enum Rol {
  USUARIO
  BIBLIOTECARIO
  DIRECTOR
}

enum EstadoReserva{
  VIGENTE
  VENCIDA
}

enum EstadoPrestamo{
  VIGENTE
  VENCIDO
  CERRADO
}